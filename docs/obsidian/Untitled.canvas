{
	"nodes":[
		{"id":"88c1648df28621ab","x":1400,"y":-1240,"width":1580,"height":700,"type":"group","label":"Folder Tree"},
		{"type":"group","id":"ffa459dcb3a3d5d9","x":1560,"y":-1180,"width":1400,"height":620,"color":"5","label":"srcs"},
		{"type":"group","id":"112178a57bc255eb","x":1840,"y":-1100,"width":1100,"height":520,"color":"5","label":"requirements"},
		{"type":"group","id":"5ab2569856bcbb50","x":1860,"y":-1018,"width":260,"height":357,"label":"mariadb"},
		{"type":"group","id":"5687fc99fa97917c","x":2140,"y":-1018,"width":260,"height":357,"label":"nginx"},
		{"type":"group","id":"7145ea8d6270e467","x":2420,"y":-1018,"width":260,"height":357,"label":"wordpress"},
		{"type":"text","text":"# WordPress\n- [ ] Un container Docker contenant WordPress + php-fpm (installé et configuré) uni- quement sans nginx.\n- [ ] Un volume contenant votre base de données WordPress.\n- [ ] Un second volume contenant les fichiers de votre site WordPress.\n- [ ] Deux utilisateurs seront présents dans votre base de données WordPress, l’un d’eux étant le compte Admin. L’username de l’Admin ne devra pas comporter \"admin\" ou \"Admin\" (exemples : admin, administrator, administrateur, administratrice, admin-123, etc. ...).\n- [ ] Vos volumes seront disponibles dans le dossier /home/login/data de la machine hôte utilisant Docker. Bien entendu, remplacez le \"login\" par le vôtre.","id":"8e3c33ad5f0df397","x":0,"y":-380,"width":700,"height":520},
		{"type":"text","text":"# Nginx\n- Un container Docker contenant NGINX avec TLSv1.2 ou TLSv1.3 uniquement.","id":"28f3179a7b14f66e","x":-800,"y":-380,"width":700,"height":520},
		{"type":"text","text":"# MariaDB\n- Un container Docker contenant MariaDB uniquement sans nginx.","id":"85e07abcd40382e1","x":-400,"y":-1020,"width":700,"height":520},
		{"type":"file","file":"Pasted image 20230815092209.png","id":"0e7e0803145cd5c5","x":520,"y":-1521,"width":800,"height":1003},
		{"type":"text","text":"# Autres\n- [ ] Chaque image Docker devra obligatoirement porter le même nom que le service concerné.\n- [ ] Pour des raisons de performance, les containers devront être build au choix : soit sous Alpine Linux avec l’avant-dernière version stable, soit sous Debian Buster.\n- [ ] Aussi, ils devront chacun posséder leur propre Dockerfile écrit par vos soins.\n- [ ] Les Dockerfiles seront appelés dans votre fichier docker-compose.yml par votre Makefile.\n- [ ] Chaque service devra tourner dans un container dédié.\n- [ ] Un docker-network qui fera le lien entre vos containers.\n- [ ] Pour des questions de lisibilité, il faudra configurer votre nom de domaine afin qu’il pointe vers votre adresse IP locale.\n- [ ] Ce nom de domaine sera login.42.fr. A nouveau, vous utiliserez votre login.  \nPar exemple, si votre login est wil, wil.42.fr redirigera vers l’adresse IP pointant vers le site web de wil.\n- [ ] Vos containers devront redémarrer en cas de crash.","id":"da2f1efedb8313c4","x":-1280,"y":-1160,"width":640,"height":560},
		{"type":"text","text":"# Consignes générales\n\n- Ce projet est à realiser dans une machine Virtuelle.\n    \n- Vous devez rendre tous les fichiers nécessaires à la configuration de votre projet\n    \n    dans un dossier srcs.\n    \n- Vous devez également rendre un Makefile qui doit se trouver à la racine de votre répertoire. Il doit permettre de mettre en place toute votre application (c’est-à-dire build les images Docker via docker-compose.yml).\n    \n- Ce sujet requiert de mettre en pratique des notions que, selon votre parcours, vous n’avez possiblement pas encore abordées. Nous vous conseillons donc de ne pas avoir peur de lire beaucoup de documentation sur l’utilisation de Docker, ainsi que sur tout ce que vous jugerez utile pour réaliser ce projet","id":"0c390b49846c934e","x":-1220,"y":-1700,"width":640,"height":401},
		{"type":"text","text":"# ⛔️ Attention\nLe tag latest est interdit.\nAucun mot de passe ne doit être présent dans vos Dockerfiles.\nL’utilisation des variables d’environnement est obligatoire.\nLa mise en place d’un fichier .env afin de stocker vos variables d’environnement est fortement conseillée. Ce fichier devra être rangé à la racine de votre dossier srcs.\nVotre container NGINX doit être le seul point d’entrée de votre infrastructure par le port 443 uniquement en utilisant le protocole TLSv1.2 ou TLSv1.3.\nPour des raisons évidentes de sécurité, tous les identifiants, clés API, variables env etc... doivent être enregistrées localement dans un fichier .env et ignorées par git. Les informations d’identification stockées publiquement vous conduiront directement à un échec du projet.\nL’utilisation de network: host ou --link ou encore links: est bien entendu interdite. La ligne network(s) doit être présente dans votre fichier docker-compose.yml. Vos containers ne doivent pas être démarrés avec une commande faisant tourner une boucle infinie. Cela concerne donc aussi les commandes utilisées comme entrypoint, dont celles qui sont dans un script. Exemples de \"hacky patch\" interdits :\ntaif -f, bash, sleep infinity, while true, etc. ...","id":"7694f7da1601298b","x":-520,"y":-1880,"width":920,"height":640,"color":"1"},
		{"type":"text","text":"docker-compose.yml","id":"105cb0be8ec7720b","x":1600,"y":-1091,"width":220,"height":59,"color":"6"},
		{"type":"text","text":"conf","id":"8280d7f37a04f0df","x":1880,"y":-998,"width":220,"height":59,"color":"5"},
		{"type":"text","text":"tools","id":"0cb35650572ce18b","x":2700,"y":-998,"width":220,"height":59,"color":"5"},
		{"type":"text","text":".env","id":"efd200d8c35a941a","x":1600,"y":-1010,"width":220,"height":59,"color":"6"},
		{"type":"text","text":"Makefile","id":"6c8aa5c6f03b22a3","x":1420,"y":-1170,"width":120,"height":59,"color":"6"},
		{"type":"text","text":"Dockerfile","id":"35227535a06ed444","x":2160,"y":-921,"width":220,"height":59,"color":"6"},
		{"type":"text","text":"Dockerfile","id":"4e3ff7189702a386","x":2440,"y":-921,"width":220,"height":59,"color":"6"},
		{"type":"text","text":".dockerignore","id":"e5e6767d1a38bf39","x":2160,"y":-829,"width":220,"height":59,"color":"6"},
		{"type":"text","text":"tools","id":"b16b0a278c4ef543","x":2160,"y":-740,"width":220,"height":59,"color":"5"},
		{"type":"text","text":".dockerignore","id":"631eb9cae9d6fcb2","x":2440,"y":-829,"width":220,"height":59,"color":"6"},
		{"type":"text","text":"tools","id":"da4528918f63d85f","x":2440,"y":-740,"width":220,"height":59,"color":"5"},
		{"type":"text","text":"conf","id":"f0d842ee63acd64f","x":2160,"y":-998,"width":220,"height":59,"color":"5"},
		{"type":"text","text":"conf","id":"52a0c34933df2d73","x":2440,"y":-998,"width":220,"height":59,"color":"5"},
		{"type":"text","text":"Dockerfile","id":"33b049f086581196","x":1880,"y":-921,"width":220,"height":59,"color":"6"},
		{"type":"text","text":"bonus","id":"635074646da379cd","x":2700,"y":-921,"width":220,"height":59,"color":"5"},
		{"type":"text","text":".dockerignore","id":"312700a405e29b48","x":1880,"y":-829,"width":220,"height":59,"color":"6"},
		{"type":"text","text":"tools","id":"8388680cbbbbe11c","x":1880,"y":-740,"width":220,"height":59,"color":"5"},
		{"id":"b1aafee54a994dbf","x":920,"y":-410,"width":1120,"height":610,"type":"text","text":"# Commands\n- `docker build -t name <path>` : Permet de build un container.\n- `docker image ls` : Connaître les images actuelles.\n- `docker run -it <image_name>` : Démarrer une image. (`-it` permet de lancer le terminal à son lancement)\n- `docker ps` : Connaître les containers actuellement lancés. "}
	],
	"edges":[]
}